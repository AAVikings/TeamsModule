# source: http://localhost:4466
# timestamp: Tue Nov 20 2018 09:55:31 GMT-0800 (Pacific Standard Time)

type AggregateFBStatus {
  count: Int!
}

type AggregateFinancialBeings {
  count: Int!
}

type AggregateMember {
  count: Int!
}

type AggregateMemberStatus {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateTeamMembers {
  count: Int!
}

type AggregateTeamMemberStatus {
  count: Int!
}

type AggregateTeamProfile {
  count: Int!
}

type AggregateTeamStatus {
  count: Int!
}

type AggregateWallet {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

enum FBKind {
  TRADER
  INDICATOR
  EXTRACTOR
  PLOTTER
  Trader
  Trading
  Indicator
  Sensor
  Plotter
}

type FBStatus implements Node {
  id: ID!
  status: Status
  reason: String
  createdAt: DateTime!
}

"""A connection to a list of items."""
type FBStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FBStatusEdge]!
  aggregate: AggregateFBStatus!
}

input FBStatusCreateInput {
  status: Status
  reason: String
}

input FBStatusCreateManyInput {
  create: [FBStatusCreateInput!]
  connect: [FBStatusWhereUniqueInput!]
}

"""An edge in a connection."""
type FBStatusEdge {
  """The item at the end of the edge."""
  node: FBStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FBStatusOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  reason_ASC
  reason_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FBStatusPreviousValues {
  id: ID!
  status: Status
  reason: String
  createdAt: DateTime!
}

type FBStatusSubscriptionPayload {
  mutation: MutationType!
  node: FBStatus
  updatedFields: [String!]
  previousValues: FBStatusPreviousValues
}

input FBStatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FBStatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FBStatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FBStatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FBStatusWhereInput
}

input FBStatusUpdateDataInput {
  status: Status
  reason: String
}

input FBStatusUpdateInput {
  status: Status
  reason: String
}

input FBStatusUpdateManyInput {
  create: [FBStatusCreateInput!]
  connect: [FBStatusWhereUniqueInput!]
  disconnect: [FBStatusWhereUniqueInput!]
  delete: [FBStatusWhereUniqueInput!]
  update: [FBStatusUpdateWithWhereUniqueNestedInput!]
  upsert: [FBStatusUpsertWithWhereUniqueNestedInput!]
}

input FBStatusUpdateManyMutationInput {
  status: Status
  reason: String
}

input FBStatusUpdateWithWhereUniqueNestedInput {
  where: FBStatusWhereUniqueInput!
  data: FBStatusUpdateDataInput!
}

input FBStatusUpsertWithWhereUniqueNestedInput {
  where: FBStatusWhereUniqueInput!
  update: FBStatusUpdateDataInput!
  create: FBStatusCreateInput!
}

input FBStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [FBStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [FBStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FBStatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: Status

  """All values that are not equal to given value."""
  status_not: Status

  """All values that are contained in given list."""
  status_in: [Status!]

  """All values that are not contained in given list."""
  status_not_in: [Status!]
  reason: String

  """All values that are not equal to given value."""
  reason_not: String

  """All values that are contained in given list."""
  reason_in: [String!]

  """All values that are not contained in given list."""
  reason_not_in: [String!]

  """All values less than the given value."""
  reason_lt: String

  """All values less than or equal the given value."""
  reason_lte: String

  """All values greater than the given value."""
  reason_gt: String

  """All values greater than or equal the given value."""
  reason_gte: String

  """All values containing the given string."""
  reason_contains: String

  """All values not containing the given string."""
  reason_not_contains: String

  """All values starting with the given string."""
  reason_starts_with: String

  """All values not starting with the given string."""
  reason_not_starts_with: String

  """All values ending with the given string."""
  reason_ends_with: String

  """All values not ending with the given string."""
  reason_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

input FBStatusWhereUniqueInput {
  id: ID
}

enum FBType {
  BOT
  NET
  ADVANCED
}

type FinancialBeings implements Node {
  id: ID!
  type: FBType
  kind: FBKind
  name: String!
  slug: String!
  avatar: String
  team: Team
  status(where: FBStatusWhereInput, orderBy: FBStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FBStatus!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type FinancialBeingsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FinancialBeingsEdge]!
  aggregate: AggregateFinancialBeings!
}

input FinancialBeingsCreateInput {
  type: FBType
  kind: FBKind
  name: String!
  slug: String!
  avatar: String
  team: TeamCreateOneWithoutFbInput
  status: FBStatusCreateManyInput
}

input FinancialBeingsCreateManyWithoutTeamInput {
  create: [FinancialBeingsCreateWithoutTeamInput!]
  connect: [FinancialBeingsWhereUniqueInput!]
}

input FinancialBeingsCreateWithoutTeamInput {
  type: FBType
  kind: FBKind
  name: String!
  slug: String!
  avatar: String
  status: FBStatusCreateManyInput
}

"""An edge in a connection."""
type FinancialBeingsEdge {
  """The item at the end of the edge."""
  node: FinancialBeings!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FinancialBeingsOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  kind_ASC
  kind_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  avatar_ASC
  avatar_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FinancialBeingsPreviousValues {
  id: ID!
  type: FBType
  kind: FBKind
  name: String!
  slug: String!
  avatar: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FinancialBeingsSubscriptionPayload {
  mutation: MutationType!
  node: FinancialBeings
  updatedFields: [String!]
  previousValues: FinancialBeingsPreviousValues
}

input FinancialBeingsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FinancialBeingsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FinancialBeingsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FinancialBeingsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FinancialBeingsWhereInput
}

input FinancialBeingsUpdateInput {
  type: FBType
  kind: FBKind
  name: String
  slug: String
  avatar: String
  team: TeamUpdateOneWithoutFbInput
  status: FBStatusUpdateManyInput
}

input FinancialBeingsUpdateManyMutationInput {
  type: FBType
  kind: FBKind
  name: String
  slug: String
  avatar: String
}

input FinancialBeingsUpdateManyWithoutTeamInput {
  create: [FinancialBeingsCreateWithoutTeamInput!]
  connect: [FinancialBeingsWhereUniqueInput!]
  disconnect: [FinancialBeingsWhereUniqueInput!]
  delete: [FinancialBeingsWhereUniqueInput!]
  update: [FinancialBeingsUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [FinancialBeingsUpsertWithWhereUniqueWithoutTeamInput!]
}

input FinancialBeingsUpdateWithoutTeamDataInput {
  type: FBType
  kind: FBKind
  name: String
  slug: String
  avatar: String
  status: FBStatusUpdateManyInput
}

input FinancialBeingsUpdateWithWhereUniqueWithoutTeamInput {
  where: FinancialBeingsWhereUniqueInput!
  data: FinancialBeingsUpdateWithoutTeamDataInput!
}

input FinancialBeingsUpsertWithWhereUniqueWithoutTeamInput {
  where: FinancialBeingsWhereUniqueInput!
  update: FinancialBeingsUpdateWithoutTeamDataInput!
  create: FinancialBeingsCreateWithoutTeamInput!
}

input FinancialBeingsWhereInput {
  """Logical AND on all given filters."""
  AND: [FinancialBeingsWhereInput!]

  """Logical OR on all given filters."""
  OR: [FinancialBeingsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FinancialBeingsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: FBType

  """All values that are not equal to given value."""
  type_not: FBType

  """All values that are contained in given list."""
  type_in: [FBType!]

  """All values that are not contained in given list."""
  type_not_in: [FBType!]
  kind: FBKind

  """All values that are not equal to given value."""
  kind_not: FBKind

  """All values that are contained in given list."""
  kind_in: [FBKind!]

  """All values that are not contained in given list."""
  kind_not_in: [FBKind!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  team: TeamWhereInput
  status_every: FBStatusWhereInput
  status_some: FBStatusWhereInput
  status_none: FBStatusWhereInput
}

input FinancialBeingsWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Member implements Node {
  id: ID!
  alias: String
  teams(where: TeamMembersWhereInput, orderBy: TeamMembersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamMembers!]
  authId: String!
  visible: Boolean!
  status(where: MemberStatusWhereInput, orderBy: MemberStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MemberStatus!]
  createdAt: DateTime!
}

"""A connection to a list of items."""
type MemberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MemberEdge]!
  aggregate: AggregateMember!
}

input MemberCreateInput {
  alias: String
  authId: String!
  visible: Boolean
  teams: TeamMembersCreateManyWithoutMemberInput
  status: MemberStatusCreateManyInput
}

input MemberCreateOneWithoutTeamsInput {
  create: MemberCreateWithoutTeamsInput
  connect: MemberWhereUniqueInput
}

input MemberCreateWithoutTeamsInput {
  alias: String
  authId: String!
  visible: Boolean
  status: MemberStatusCreateManyInput
}

"""An edge in a connection."""
type MemberEdge {
  """The item at the end of the edge."""
  node: Member!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MemberOrderByInput {
  id_ASC
  id_DESC
  alias_ASC
  alias_DESC
  authId_ASC
  authId_DESC
  visible_ASC
  visible_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MemberPreviousValues {
  id: ID!
  alias: String
  authId: String!
  visible: Boolean!
  createdAt: DateTime!
}

type MemberStatus implements Node {
  id: ID!
  status: Status
  reason: String
  createdAt: DateTime!
}

"""A connection to a list of items."""
type MemberStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MemberStatusEdge]!
  aggregate: AggregateMemberStatus!
}

input MemberStatusCreateInput {
  status: Status
  reason: String
}

input MemberStatusCreateManyInput {
  create: [MemberStatusCreateInput!]
  connect: [MemberStatusWhereUniqueInput!]
}

"""An edge in a connection."""
type MemberStatusEdge {
  """The item at the end of the edge."""
  node: MemberStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MemberStatusOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  reason_ASC
  reason_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MemberStatusPreviousValues {
  id: ID!
  status: Status
  reason: String
  createdAt: DateTime!
}

type MemberStatusSubscriptionPayload {
  mutation: MutationType!
  node: MemberStatus
  updatedFields: [String!]
  previousValues: MemberStatusPreviousValues
}

input MemberStatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MemberStatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MemberStatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MemberStatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MemberStatusWhereInput
}

input MemberStatusUpdateDataInput {
  status: Status
  reason: String
}

input MemberStatusUpdateInput {
  status: Status
  reason: String
}

input MemberStatusUpdateManyInput {
  create: [MemberStatusCreateInput!]
  connect: [MemberStatusWhereUniqueInput!]
  disconnect: [MemberStatusWhereUniqueInput!]
  delete: [MemberStatusWhereUniqueInput!]
  update: [MemberStatusUpdateWithWhereUniqueNestedInput!]
  upsert: [MemberStatusUpsertWithWhereUniqueNestedInput!]
}

input MemberStatusUpdateManyMutationInput {
  status: Status
  reason: String
}

input MemberStatusUpdateWithWhereUniqueNestedInput {
  where: MemberStatusWhereUniqueInput!
  data: MemberStatusUpdateDataInput!
}

input MemberStatusUpsertWithWhereUniqueNestedInput {
  where: MemberStatusWhereUniqueInput!
  update: MemberStatusUpdateDataInput!
  create: MemberStatusCreateInput!
}

input MemberStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [MemberStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [MemberStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MemberStatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: Status

  """All values that are not equal to given value."""
  status_not: Status

  """All values that are contained in given list."""
  status_in: [Status!]

  """All values that are not contained in given list."""
  status_not_in: [Status!]
  reason: String

  """All values that are not equal to given value."""
  reason_not: String

  """All values that are contained in given list."""
  reason_in: [String!]

  """All values that are not contained in given list."""
  reason_not_in: [String!]

  """All values less than the given value."""
  reason_lt: String

  """All values less than or equal the given value."""
  reason_lte: String

  """All values greater than the given value."""
  reason_gt: String

  """All values greater than or equal the given value."""
  reason_gte: String

  """All values containing the given string."""
  reason_contains: String

  """All values not containing the given string."""
  reason_not_contains: String

  """All values starting with the given string."""
  reason_starts_with: String

  """All values not starting with the given string."""
  reason_not_starts_with: String

  """All values ending with the given string."""
  reason_ends_with: String

  """All values not ending with the given string."""
  reason_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

input MemberStatusWhereUniqueInput {
  id: ID
}

type MemberSubscriptionPayload {
  mutation: MutationType!
  node: Member
  updatedFields: [String!]
  previousValues: MemberPreviousValues
}

input MemberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MemberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MemberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MemberSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MemberWhereInput
}

input MemberUpdateInput {
  alias: String
  authId: String
  visible: Boolean
  teams: TeamMembersUpdateManyWithoutMemberInput
  status: MemberStatusUpdateManyInput
}

input MemberUpdateManyMutationInput {
  alias: String
  authId: String
  visible: Boolean
}

input MemberUpdateOneWithoutTeamsInput {
  create: MemberCreateWithoutTeamsInput
  connect: MemberWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MemberUpdateWithoutTeamsDataInput
  upsert: MemberUpsertWithoutTeamsInput
}

input MemberUpdateWithoutTeamsDataInput {
  alias: String
  authId: String
  visible: Boolean
  status: MemberStatusUpdateManyInput
}

input MemberUpsertWithoutTeamsInput {
  update: MemberUpdateWithoutTeamsDataInput!
  create: MemberCreateWithoutTeamsInput!
}

input MemberWhereInput {
  """Logical AND on all given filters."""
  AND: [MemberWhereInput!]

  """Logical OR on all given filters."""
  OR: [MemberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MemberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  alias: String

  """All values that are not equal to given value."""
  alias_not: String

  """All values that are contained in given list."""
  alias_in: [String!]

  """All values that are not contained in given list."""
  alias_not_in: [String!]

  """All values less than the given value."""
  alias_lt: String

  """All values less than or equal the given value."""
  alias_lte: String

  """All values greater than the given value."""
  alias_gt: String

  """All values greater than or equal the given value."""
  alias_gte: String

  """All values containing the given string."""
  alias_contains: String

  """All values not containing the given string."""
  alias_not_contains: String

  """All values starting with the given string."""
  alias_starts_with: String

  """All values not starting with the given string."""
  alias_not_starts_with: String

  """All values ending with the given string."""
  alias_ends_with: String

  """All values not ending with the given string."""
  alias_not_ends_with: String
  authId: String

  """All values that are not equal to given value."""
  authId_not: String

  """All values that are contained in given list."""
  authId_in: [String!]

  """All values that are not contained in given list."""
  authId_not_in: [String!]

  """All values less than the given value."""
  authId_lt: String

  """All values less than or equal the given value."""
  authId_lte: String

  """All values greater than the given value."""
  authId_gt: String

  """All values greater than or equal the given value."""
  authId_gte: String

  """All values containing the given string."""
  authId_contains: String

  """All values not containing the given string."""
  authId_not_contains: String

  """All values starting with the given string."""
  authId_starts_with: String

  """All values not starting with the given string."""
  authId_not_starts_with: String

  """All values ending with the given string."""
  authId_ends_with: String

  """All values not ending with the given string."""
  authId_not_ends_with: String
  visible: Boolean

  """All values that are not equal to given value."""
  visible_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  teams_every: TeamMembersWhereInput
  teams_some: TeamMembersWhereInput
  teams_none: TeamMembersWhereInput
  status_every: MemberStatusWhereInput
  status_some: MemberStatusWhereInput
  status_none: MemberStatusWhereInput
}

input MemberWhereUniqueInput {
  id: ID
  authId: String
}

type Mutation {
  createTeam(data: TeamCreateInput!): Team!
  createTeamMembers(data: TeamMembersCreateInput!): TeamMembers!
  createMember(data: MemberCreateInput!): Member!
  createFinancialBeings(data: FinancialBeingsCreateInput!): FinancialBeings!
  createTeamProfile(data: TeamProfileCreateInput!): TeamProfile!
  createWallet(data: WalletCreateInput!): Wallet!
  createMemberStatus(data: MemberStatusCreateInput!): MemberStatus!
  createFBStatus(data: FBStatusCreateInput!): FBStatus!
  createTeamMemberStatus(data: TeamMemberStatusCreateInput!): TeamMemberStatus!
  createTeamStatus(data: TeamStatusCreateInput!): TeamStatus!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateTeamMembers(data: TeamMembersUpdateInput!, where: TeamMembersWhereUniqueInput!): TeamMembers
  updateMember(data: MemberUpdateInput!, where: MemberWhereUniqueInput!): Member
  updateFinancialBeings(data: FinancialBeingsUpdateInput!, where: FinancialBeingsWhereUniqueInput!): FinancialBeings
  updateTeamProfile(data: TeamProfileUpdateInput!, where: TeamProfileWhereUniqueInput!): TeamProfile
  updateWallet(data: WalletUpdateInput!, where: WalletWhereUniqueInput!): Wallet
  updateMemberStatus(data: MemberStatusUpdateInput!, where: MemberStatusWhereUniqueInput!): MemberStatus
  updateFBStatus(data: FBStatusUpdateInput!, where: FBStatusWhereUniqueInput!): FBStatus
  updateTeamMemberStatus(data: TeamMemberStatusUpdateInput!, where: TeamMemberStatusWhereUniqueInput!): TeamMemberStatus
  updateTeamStatus(data: TeamStatusUpdateInput!, where: TeamStatusWhereUniqueInput!): TeamStatus
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeamMembers(where: TeamMembersWhereUniqueInput!): TeamMembers
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteFinancialBeings(where: FinancialBeingsWhereUniqueInput!): FinancialBeings
  deleteTeamProfile(where: TeamProfileWhereUniqueInput!): TeamProfile
  deleteWallet(where: WalletWhereUniqueInput!): Wallet
  deleteMemberStatus(where: MemberStatusWhereUniqueInput!): MemberStatus
  deleteFBStatus(where: FBStatusWhereUniqueInput!): FBStatus
  deleteTeamMemberStatus(where: TeamMemberStatusWhereUniqueInput!): TeamMemberStatus
  deleteTeamStatus(where: TeamStatusWhereUniqueInput!): TeamStatus
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  upsertTeamMembers(where: TeamMembersWhereUniqueInput!, create: TeamMembersCreateInput!, update: TeamMembersUpdateInput!): TeamMembers!
  upsertMember(where: MemberWhereUniqueInput!, create: MemberCreateInput!, update: MemberUpdateInput!): Member!
  upsertFinancialBeings(where: FinancialBeingsWhereUniqueInput!, create: FinancialBeingsCreateInput!, update: FinancialBeingsUpdateInput!): FinancialBeings!
  upsertTeamProfile(where: TeamProfileWhereUniqueInput!, create: TeamProfileCreateInput!, update: TeamProfileUpdateInput!): TeamProfile!
  upsertWallet(where: WalletWhereUniqueInput!, create: WalletCreateInput!, update: WalletUpdateInput!): Wallet!
  upsertMemberStatus(where: MemberStatusWhereUniqueInput!, create: MemberStatusCreateInput!, update: MemberStatusUpdateInput!): MemberStatus!
  upsertFBStatus(where: FBStatusWhereUniqueInput!, create: FBStatusCreateInput!, update: FBStatusUpdateInput!): FBStatus!
  upsertTeamMemberStatus(where: TeamMemberStatusWhereUniqueInput!, create: TeamMemberStatusCreateInput!, update: TeamMemberStatusUpdateInput!): TeamMemberStatus!
  upsertTeamStatus(where: TeamStatusWhereUniqueInput!, create: TeamStatusCreateInput!, update: TeamStatusUpdateInput!): TeamStatus!
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  updateManyTeamMemberses(data: TeamMembersUpdateManyMutationInput!, where: TeamMembersWhereInput): BatchPayload!
  updateManyMembers(data: MemberUpdateManyMutationInput!, where: MemberWhereInput): BatchPayload!
  updateManyFinancialBeingses(data: FinancialBeingsUpdateManyMutationInput!, where: FinancialBeingsWhereInput): BatchPayload!
  updateManyTeamProfiles(data: TeamProfileUpdateManyMutationInput!, where: TeamProfileWhereInput): BatchPayload!
  updateManyWallets(data: WalletUpdateManyMutationInput!, where: WalletWhereInput): BatchPayload!
  updateManyMemberStatuses(data: MemberStatusUpdateManyMutationInput!, where: MemberStatusWhereInput): BatchPayload!
  updateManyFBStatuses(data: FBStatusUpdateManyMutationInput!, where: FBStatusWhereInput): BatchPayload!
  updateManyTeamMemberStatuses(data: TeamMemberStatusUpdateManyMutationInput!, where: TeamMemberStatusWhereInput): BatchPayload!
  updateManyTeamStatuses(data: TeamStatusUpdateManyMutationInput!, where: TeamStatusWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  deleteManyTeamMemberses(where: TeamMembersWhereInput): BatchPayload!
  deleteManyMembers(where: MemberWhereInput): BatchPayload!
  deleteManyFinancialBeingses(where: FinancialBeingsWhereInput): BatchPayload!
  deleteManyTeamProfiles(where: TeamProfileWhereInput): BatchPayload!
  deleteManyWallets(where: WalletWhereInput): BatchPayload!
  deleteManyMemberStatuses(where: MemberStatusWhereInput): BatchPayload!
  deleteManyFBStatuses(where: FBStatusWhereInput): BatchPayload!
  deleteManyTeamMemberStatuses(where: TeamMemberStatusWhereInput): BatchPayload!
  deleteManyTeamStatuses(where: TeamStatusWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamMemberses(where: TeamMembersWhereInput, orderBy: TeamMembersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamMembers]!
  members(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Member]!
  financialBeingses(where: FinancialBeingsWhereInput, orderBy: FinancialBeingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinancialBeings]!
  teamProfiles(where: TeamProfileWhereInput, orderBy: TeamProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamProfile]!
  wallets(where: WalletWhereInput, orderBy: WalletOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Wallet]!
  memberStatuses(where: MemberStatusWhereInput, orderBy: MemberStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MemberStatus]!
  fBStatuses(where: FBStatusWhereInput, orderBy: FBStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FBStatus]!
  teamMemberStatuses(where: TeamMemberStatusWhereInput, orderBy: TeamMemberStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamMemberStatus]!
  teamStatuses(where: TeamStatusWhereInput, orderBy: TeamStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamStatus]!
  team(where: TeamWhereUniqueInput!): Team
  teamMembers(where: TeamMembersWhereUniqueInput!): TeamMembers
  member(where: MemberWhereUniqueInput!): Member
  financialBeings(where: FinancialBeingsWhereUniqueInput!): FinancialBeings
  teamProfile(where: TeamProfileWhereUniqueInput!): TeamProfile
  wallet(where: WalletWhereUniqueInput!): Wallet
  memberStatus(where: MemberStatusWhereUniqueInput!): MemberStatus
  fBStatus(where: FBStatusWhereUniqueInput!): FBStatus
  teamMemberStatus(where: TeamMemberStatusWhereUniqueInput!): TeamMemberStatus
  teamStatus(where: TeamStatusWhereUniqueInput!): TeamStatus
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  teamMembersesConnection(where: TeamMembersWhereInput, orderBy: TeamMembersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamMembersConnection!
  membersConnection(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MemberConnection!
  financialBeingsesConnection(where: FinancialBeingsWhereInput, orderBy: FinancialBeingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FinancialBeingsConnection!
  teamProfilesConnection(where: TeamProfileWhereInput, orderBy: TeamProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamProfileConnection!
  walletsConnection(where: WalletWhereInput, orderBy: WalletOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WalletConnection!
  memberStatusesConnection(where: MemberStatusWhereInput, orderBy: MemberStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MemberStatusConnection!
  fBStatusesConnection(where: FBStatusWhereInput, orderBy: FBStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FBStatusConnection!
  teamMemberStatusesConnection(where: TeamMemberStatusWhereInput, orderBy: TeamMemberStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamMemberStatusConnection!
  teamStatusesConnection(where: TeamStatusWhereInput, orderBy: TeamStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamStatusConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum Status {
  ACTIVE
  INACTIVE
  APPLIED
  INVITED
  REMOVED
}

type Subscription {
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  teamMembers(where: TeamMembersSubscriptionWhereInput): TeamMembersSubscriptionPayload
  member(where: MemberSubscriptionWhereInput): MemberSubscriptionPayload
  financialBeings(where: FinancialBeingsSubscriptionWhereInput): FinancialBeingsSubscriptionPayload
  teamProfile(where: TeamProfileSubscriptionWhereInput): TeamProfileSubscriptionPayload
  wallet(where: WalletSubscriptionWhereInput): WalletSubscriptionPayload
  memberStatus(where: MemberStatusSubscriptionWhereInput): MemberStatusSubscriptionPayload
  fBStatus(where: FBStatusSubscriptionWhereInput): FBStatusSubscriptionPayload
  teamMemberStatus(where: TeamMemberStatusSubscriptionWhereInput): TeamMemberStatusSubscriptionPayload
  teamStatus(where: TeamStatusSubscriptionWhereInput): TeamStatusSubscriptionPayload
}

type Team implements Node {
  id: ID!
  name: String!
  slug: String!
  profile: TeamProfile
  members(where: TeamMembersWhereInput, orderBy: TeamMembersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamMembers!]
  owner: String!
  wallet: Wallet
  fb(where: FinancialBeingsWhereInput, orderBy: FinancialBeingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinancialBeings!]
  status(where: TeamStatusWhereInput, orderBy: TeamStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamStatus!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type TeamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  name: String!
  slug: String!
  owner: String!
  profile: TeamProfileCreateOneInput
  members: TeamMembersCreateManyWithoutTeamInput
  wallet: WalletCreateOneInput
  fb: FinancialBeingsCreateManyWithoutTeamInput
  status: TeamStatusCreateManyInput
}

input TeamCreateOneWithoutFbInput {
  create: TeamCreateWithoutFbInput
  connect: TeamWhereUniqueInput
}

input TeamCreateOneWithoutMembersInput {
  create: TeamCreateWithoutMembersInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutFbInput {
  name: String!
  slug: String!
  owner: String!
  profile: TeamProfileCreateOneInput
  members: TeamMembersCreateManyWithoutTeamInput
  wallet: WalletCreateOneInput
  status: TeamStatusCreateManyInput
}

input TeamCreateWithoutMembersInput {
  name: String!
  slug: String!
  owner: String!
  profile: TeamProfileCreateOneInput
  wallet: WalletCreateOneInput
  fb: FinancialBeingsCreateManyWithoutTeamInput
  status: TeamStatusCreateManyInput
}

"""An edge in a connection."""
type TeamEdge {
  """The item at the end of the edge."""
  node: Team!

  """A cursor for use in pagination."""
  cursor: String!
}

type TeamMembers implements Node {
  id: ID!
  member: Member
  team: Team
  role: Role
  status(where: TeamMemberStatusWhereInput, orderBy: TeamMemberStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamMemberStatus!]
  email: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type TeamMembersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamMembersEdge]!
  aggregate: AggregateTeamMembers!
}

input TeamMembersCreateInput {
  role: Role
  email: String
  member: MemberCreateOneWithoutTeamsInput
  team: TeamCreateOneWithoutMembersInput
  status: TeamMemberStatusCreateManyInput
}

input TeamMembersCreateManyWithoutMemberInput {
  create: [TeamMembersCreateWithoutMemberInput!]
  connect: [TeamMembersWhereUniqueInput!]
}

input TeamMembersCreateManyWithoutTeamInput {
  create: [TeamMembersCreateWithoutTeamInput!]
  connect: [TeamMembersWhereUniqueInput!]
}

input TeamMembersCreateWithoutMemberInput {
  role: Role
  email: String
  team: TeamCreateOneWithoutMembersInput
  status: TeamMemberStatusCreateManyInput
}

input TeamMembersCreateWithoutTeamInput {
  role: Role
  email: String
  member: MemberCreateOneWithoutTeamsInput
  status: TeamMemberStatusCreateManyInput
}

"""An edge in a connection."""
type TeamMembersEdge {
  """The item at the end of the edge."""
  node: TeamMembers!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeamMembersOrderByInput {
  id_ASC
  id_DESC
  role_ASC
  role_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TeamMembersPreviousValues {
  id: ID!
  role: Role
  email: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TeamMembersSubscriptionPayload {
  mutation: MutationType!
  node: TeamMembers
  updatedFields: [String!]
  previousValues: TeamMembersPreviousValues
}

input TeamMembersSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamMembersSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamMembersSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamMembersSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamMembersWhereInput
}

type TeamMemberStatus implements Node {
  id: ID!
  status: Status
  reason: String
  createdAt: DateTime!
}

"""A connection to a list of items."""
type TeamMemberStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamMemberStatusEdge]!
  aggregate: AggregateTeamMemberStatus!
}

input TeamMemberStatusCreateInput {
  status: Status
  reason: String
}

input TeamMemberStatusCreateManyInput {
  create: [TeamMemberStatusCreateInput!]
  connect: [TeamMemberStatusWhereUniqueInput!]
}

"""An edge in a connection."""
type TeamMemberStatusEdge {
  """The item at the end of the edge."""
  node: TeamMemberStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeamMemberStatusOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  reason_ASC
  reason_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TeamMemberStatusPreviousValues {
  id: ID!
  status: Status
  reason: String
  createdAt: DateTime!
}

type TeamMemberStatusSubscriptionPayload {
  mutation: MutationType!
  node: TeamMemberStatus
  updatedFields: [String!]
  previousValues: TeamMemberStatusPreviousValues
}

input TeamMemberStatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamMemberStatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamMemberStatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamMemberStatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamMemberStatusWhereInput
}

input TeamMemberStatusUpdateDataInput {
  status: Status
  reason: String
}

input TeamMemberStatusUpdateInput {
  status: Status
  reason: String
}

input TeamMemberStatusUpdateManyInput {
  create: [TeamMemberStatusCreateInput!]
  connect: [TeamMemberStatusWhereUniqueInput!]
  disconnect: [TeamMemberStatusWhereUniqueInput!]
  delete: [TeamMemberStatusWhereUniqueInput!]
  update: [TeamMemberStatusUpdateWithWhereUniqueNestedInput!]
  upsert: [TeamMemberStatusUpsertWithWhereUniqueNestedInput!]
}

input TeamMemberStatusUpdateManyMutationInput {
  status: Status
  reason: String
}

input TeamMemberStatusUpdateWithWhereUniqueNestedInput {
  where: TeamMemberStatusWhereUniqueInput!
  data: TeamMemberStatusUpdateDataInput!
}

input TeamMemberStatusUpsertWithWhereUniqueNestedInput {
  where: TeamMemberStatusWhereUniqueInput!
  update: TeamMemberStatusUpdateDataInput!
  create: TeamMemberStatusCreateInput!
}

input TeamMemberStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamMemberStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamMemberStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamMemberStatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: Status

  """All values that are not equal to given value."""
  status_not: Status

  """All values that are contained in given list."""
  status_in: [Status!]

  """All values that are not contained in given list."""
  status_not_in: [Status!]
  reason: String

  """All values that are not equal to given value."""
  reason_not: String

  """All values that are contained in given list."""
  reason_in: [String!]

  """All values that are not contained in given list."""
  reason_not_in: [String!]

  """All values less than the given value."""
  reason_lt: String

  """All values less than or equal the given value."""
  reason_lte: String

  """All values greater than the given value."""
  reason_gt: String

  """All values greater than or equal the given value."""
  reason_gte: String

  """All values containing the given string."""
  reason_contains: String

  """All values not containing the given string."""
  reason_not_contains: String

  """All values starting with the given string."""
  reason_starts_with: String

  """All values not starting with the given string."""
  reason_not_starts_with: String

  """All values ending with the given string."""
  reason_ends_with: String

  """All values not ending with the given string."""
  reason_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

input TeamMemberStatusWhereUniqueInput {
  id: ID
}

input TeamMembersUpdateInput {
  role: Role
  email: String
  member: MemberUpdateOneWithoutTeamsInput
  team: TeamUpdateOneWithoutMembersInput
  status: TeamMemberStatusUpdateManyInput
}

input TeamMembersUpdateManyMutationInput {
  role: Role
  email: String
}

input TeamMembersUpdateManyWithoutMemberInput {
  create: [TeamMembersCreateWithoutMemberInput!]
  connect: [TeamMembersWhereUniqueInput!]
  disconnect: [TeamMembersWhereUniqueInput!]
  delete: [TeamMembersWhereUniqueInput!]
  update: [TeamMembersUpdateWithWhereUniqueWithoutMemberInput!]
  upsert: [TeamMembersUpsertWithWhereUniqueWithoutMemberInput!]
}

input TeamMembersUpdateManyWithoutTeamInput {
  create: [TeamMembersCreateWithoutTeamInput!]
  connect: [TeamMembersWhereUniqueInput!]
  disconnect: [TeamMembersWhereUniqueInput!]
  delete: [TeamMembersWhereUniqueInput!]
  update: [TeamMembersUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [TeamMembersUpsertWithWhereUniqueWithoutTeamInput!]
}

input TeamMembersUpdateWithoutMemberDataInput {
  role: Role
  email: String
  team: TeamUpdateOneWithoutMembersInput
  status: TeamMemberStatusUpdateManyInput
}

input TeamMembersUpdateWithoutTeamDataInput {
  role: Role
  email: String
  member: MemberUpdateOneWithoutTeamsInput
  status: TeamMemberStatusUpdateManyInput
}

input TeamMembersUpdateWithWhereUniqueWithoutMemberInput {
  where: TeamMembersWhereUniqueInput!
  data: TeamMembersUpdateWithoutMemberDataInput!
}

input TeamMembersUpdateWithWhereUniqueWithoutTeamInput {
  where: TeamMembersWhereUniqueInput!
  data: TeamMembersUpdateWithoutTeamDataInput!
}

input TeamMembersUpsertWithWhereUniqueWithoutMemberInput {
  where: TeamMembersWhereUniqueInput!
  update: TeamMembersUpdateWithoutMemberDataInput!
  create: TeamMembersCreateWithoutMemberInput!
}

input TeamMembersUpsertWithWhereUniqueWithoutTeamInput {
  where: TeamMembersWhereUniqueInput!
  update: TeamMembersUpdateWithoutTeamDataInput!
  create: TeamMembersCreateWithoutTeamInput!
}

input TeamMembersWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamMembersWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamMembersWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamMembersWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  role: Role

  """All values that are not equal to given value."""
  role_not: Role

  """All values that are contained in given list."""
  role_in: [Role!]

  """All values that are not contained in given list."""
  role_not_in: [Role!]
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  member: MemberWhereInput
  team: TeamWhereInput
  status_every: TeamMemberStatusWhereInput
  status_some: TeamMemberStatusWhereInput
  status_none: TeamMemberStatusWhereInput
}

input TeamMembersWhereUniqueInput {
  id: ID
  email: String
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  owner_ASC
  owner_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TeamPreviousValues {
  id: ID!
  name: String!
  slug: String!
  owner: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TeamProfile implements Node {
  id: ID!
  description: String
  motto: String
  avatar: String
  banner: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type TeamProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamProfileEdge]!
  aggregate: AggregateTeamProfile!
}

input TeamProfileCreateInput {
  description: String
  motto: String
  avatar: String
  banner: String
}

input TeamProfileCreateOneInput {
  create: TeamProfileCreateInput
  connect: TeamProfileWhereUniqueInput
}

"""An edge in a connection."""
type TeamProfileEdge {
  """The item at the end of the edge."""
  node: TeamProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeamProfileOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  motto_ASC
  motto_DESC
  avatar_ASC
  avatar_DESC
  banner_ASC
  banner_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TeamProfilePreviousValues {
  id: ID!
  description: String
  motto: String
  avatar: String
  banner: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type TeamProfileSubscriptionPayload {
  mutation: MutationType!
  node: TeamProfile
  updatedFields: [String!]
  previousValues: TeamProfilePreviousValues
}

input TeamProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamProfileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamProfileWhereInput
}

input TeamProfileUpdateDataInput {
  description: String
  motto: String
  avatar: String
  banner: String
}

input TeamProfileUpdateInput {
  description: String
  motto: String
  avatar: String
  banner: String
}

input TeamProfileUpdateManyMutationInput {
  description: String
  motto: String
  avatar: String
  banner: String
}

input TeamProfileUpdateOneInput {
  create: TeamProfileCreateInput
  connect: TeamProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TeamProfileUpdateDataInput
  upsert: TeamProfileUpsertNestedInput
}

input TeamProfileUpsertNestedInput {
  update: TeamProfileUpdateDataInput!
  create: TeamProfileCreateInput!
}

input TeamProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  motto: String

  """All values that are not equal to given value."""
  motto_not: String

  """All values that are contained in given list."""
  motto_in: [String!]

  """All values that are not contained in given list."""
  motto_not_in: [String!]

  """All values less than the given value."""
  motto_lt: String

  """All values less than or equal the given value."""
  motto_lte: String

  """All values greater than the given value."""
  motto_gt: String

  """All values greater than or equal the given value."""
  motto_gte: String

  """All values containing the given string."""
  motto_contains: String

  """All values not containing the given string."""
  motto_not_contains: String

  """All values starting with the given string."""
  motto_starts_with: String

  """All values not starting with the given string."""
  motto_not_starts_with: String

  """All values ending with the given string."""
  motto_ends_with: String

  """All values not ending with the given string."""
  motto_not_ends_with: String
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
  banner: String

  """All values that are not equal to given value."""
  banner_not: String

  """All values that are contained in given list."""
  banner_in: [String!]

  """All values that are not contained in given list."""
  banner_not_in: [String!]

  """All values less than the given value."""
  banner_lt: String

  """All values less than or equal the given value."""
  banner_lte: String

  """All values greater than the given value."""
  banner_gt: String

  """All values greater than or equal the given value."""
  banner_gte: String

  """All values containing the given string."""
  banner_contains: String

  """All values not containing the given string."""
  banner_not_contains: String

  """All values starting with the given string."""
  banner_starts_with: String

  """All values not starting with the given string."""
  banner_not_starts_with: String

  """All values ending with the given string."""
  banner_ends_with: String

  """All values not ending with the given string."""
  banner_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

input TeamProfileWhereUniqueInput {
  id: ID
}

type TeamStatus implements Node {
  id: ID!
  status: Status
  reason: String
  createdAt: DateTime!
}

"""A connection to a list of items."""
type TeamStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamStatusEdge]!
  aggregate: AggregateTeamStatus!
}

input TeamStatusCreateInput {
  status: Status
  reason: String
}

input TeamStatusCreateManyInput {
  create: [TeamStatusCreateInput!]
  connect: [TeamStatusWhereUniqueInput!]
}

"""An edge in a connection."""
type TeamStatusEdge {
  """The item at the end of the edge."""
  node: TeamStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeamStatusOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  reason_ASC
  reason_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TeamStatusPreviousValues {
  id: ID!
  status: Status
  reason: String
  createdAt: DateTime!
}

type TeamStatusSubscriptionPayload {
  mutation: MutationType!
  node: TeamStatus
  updatedFields: [String!]
  previousValues: TeamStatusPreviousValues
}

input TeamStatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamStatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamStatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamStatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamStatusWhereInput
}

input TeamStatusUpdateDataInput {
  status: Status
  reason: String
}

input TeamStatusUpdateInput {
  status: Status
  reason: String
}

input TeamStatusUpdateManyInput {
  create: [TeamStatusCreateInput!]
  connect: [TeamStatusWhereUniqueInput!]
  disconnect: [TeamStatusWhereUniqueInput!]
  delete: [TeamStatusWhereUniqueInput!]
  update: [TeamStatusUpdateWithWhereUniqueNestedInput!]
  upsert: [TeamStatusUpsertWithWhereUniqueNestedInput!]
}

input TeamStatusUpdateManyMutationInput {
  status: Status
  reason: String
}

input TeamStatusUpdateWithWhereUniqueNestedInput {
  where: TeamStatusWhereUniqueInput!
  data: TeamStatusUpdateDataInput!
}

input TeamStatusUpsertWithWhereUniqueNestedInput {
  where: TeamStatusWhereUniqueInput!
  update: TeamStatusUpdateDataInput!
  create: TeamStatusCreateInput!
}

input TeamStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamStatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: Status

  """All values that are not equal to given value."""
  status_not: Status

  """All values that are contained in given list."""
  status_in: [Status!]

  """All values that are not contained in given list."""
  status_not_in: [Status!]
  reason: String

  """All values that are not equal to given value."""
  reason_not: String

  """All values that are contained in given list."""
  reason_in: [String!]

  """All values that are not contained in given list."""
  reason_not_in: [String!]

  """All values less than the given value."""
  reason_lt: String

  """All values less than or equal the given value."""
  reason_lte: String

  """All values greater than the given value."""
  reason_gt: String

  """All values greater than or equal the given value."""
  reason_gte: String

  """All values containing the given string."""
  reason_contains: String

  """All values not containing the given string."""
  reason_not_contains: String

  """All values starting with the given string."""
  reason_starts_with: String

  """All values not starting with the given string."""
  reason_not_starts_with: String

  """All values ending with the given string."""
  reason_ends_with: String

  """All values not ending with the given string."""
  reason_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

input TeamStatusWhereUniqueInput {
  id: ID
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
}

input TeamUpdateInput {
  name: String
  slug: String
  owner: String
  profile: TeamProfileUpdateOneInput
  members: TeamMembersUpdateManyWithoutTeamInput
  wallet: WalletUpdateOneInput
  fb: FinancialBeingsUpdateManyWithoutTeamInput
  status: TeamStatusUpdateManyInput
}

input TeamUpdateManyMutationInput {
  name: String
  slug: String
  owner: String
}

input TeamUpdateOneWithoutFbInput {
  create: TeamCreateWithoutFbInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TeamUpdateWithoutFbDataInput
  upsert: TeamUpsertWithoutFbInput
}

input TeamUpdateOneWithoutMembersInput {
  create: TeamCreateWithoutMembersInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TeamUpdateWithoutMembersDataInput
  upsert: TeamUpsertWithoutMembersInput
}

input TeamUpdateWithoutFbDataInput {
  name: String
  slug: String
  owner: String
  profile: TeamProfileUpdateOneInput
  members: TeamMembersUpdateManyWithoutTeamInput
  wallet: WalletUpdateOneInput
  status: TeamStatusUpdateManyInput
}

input TeamUpdateWithoutMembersDataInput {
  name: String
  slug: String
  owner: String
  profile: TeamProfileUpdateOneInput
  wallet: WalletUpdateOneInput
  fb: FinancialBeingsUpdateManyWithoutTeamInput
  status: TeamStatusUpdateManyInput
}

input TeamUpsertWithoutFbInput {
  update: TeamUpdateWithoutFbDataInput!
  create: TeamCreateWithoutFbInput!
}

input TeamUpsertWithoutMembersInput {
  update: TeamUpdateWithoutMembersDataInput!
  create: TeamCreateWithoutMembersInput!
}

input TeamWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  owner: String

  """All values that are not equal to given value."""
  owner_not: String

  """All values that are contained in given list."""
  owner_in: [String!]

  """All values that are not contained in given list."""
  owner_not_in: [String!]

  """All values less than the given value."""
  owner_lt: String

  """All values less than or equal the given value."""
  owner_lte: String

  """All values greater than the given value."""
  owner_gt: String

  """All values greater than or equal the given value."""
  owner_gte: String

  """All values containing the given string."""
  owner_contains: String

  """All values not containing the given string."""
  owner_not_contains: String

  """All values starting with the given string."""
  owner_starts_with: String

  """All values not starting with the given string."""
  owner_not_starts_with: String

  """All values ending with the given string."""
  owner_ends_with: String

  """All values not ending with the given string."""
  owner_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  profile: TeamProfileWhereInput
  members_every: TeamMembersWhereInput
  members_some: TeamMembersWhereInput
  members_none: TeamMembersWhereInput
  wallet: WalletWhereInput
  fb_every: FinancialBeingsWhereInput
  fb_some: FinancialBeingsWhereInput
  fb_none: FinancialBeingsWhereInput
  status_every: TeamStatusWhereInput
  status_some: TeamStatusWhereInput
  status_none: TeamStatusWhereInput
}

input TeamWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

type Wallet implements Node {
  id: ID!
  balance: Float
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type WalletConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WalletEdge]!
  aggregate: AggregateWallet!
}

input WalletCreateInput {
  balance: Float
}

input WalletCreateOneInput {
  create: WalletCreateInput
  connect: WalletWhereUniqueInput
}

"""An edge in a connection."""
type WalletEdge {
  """The item at the end of the edge."""
  node: Wallet!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WalletOrderByInput {
  id_ASC
  id_DESC
  balance_ASC
  balance_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WalletPreviousValues {
  id: ID!
  balance: Float
  updatedAt: DateTime!
}

type WalletSubscriptionPayload {
  mutation: MutationType!
  node: Wallet
  updatedFields: [String!]
  previousValues: WalletPreviousValues
}

input WalletSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WalletSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WalletSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WalletSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WalletWhereInput
}

input WalletUpdateDataInput {
  balance: Float
}

input WalletUpdateInput {
  balance: Float
}

input WalletUpdateManyMutationInput {
  balance: Float
}

input WalletUpdateOneInput {
  create: WalletCreateInput
  connect: WalletWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WalletUpdateDataInput
  upsert: WalletUpsertNestedInput
}

input WalletUpsertNestedInput {
  update: WalletUpdateDataInput!
  create: WalletCreateInput!
}

input WalletWhereInput {
  """Logical AND on all given filters."""
  AND: [WalletWhereInput!]

  """Logical OR on all given filters."""
  OR: [WalletWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WalletWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  balance: Float

  """All values that are not equal to given value."""
  balance_not: Float

  """All values that are contained in given list."""
  balance_in: [Float!]

  """All values that are not contained in given list."""
  balance_not_in: [Float!]

  """All values less than the given value."""
  balance_lt: Float

  """All values less than or equal the given value."""
  balance_lte: Float

  """All values greater than the given value."""
  balance_gt: Float

  """All values greater than or equal the given value."""
  balance_gte: Float
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input WalletWhereUniqueInput {
  id: ID
}
